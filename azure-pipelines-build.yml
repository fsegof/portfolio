# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - stage
  - main

pool:
  vmImage: ubuntu-latest

variables:
  phpVersion: '8.2'
  nodeVersion: '18.x'
  rootFolder: $(System.DefaultWorkingDirectory)
  pluginFolder: $(rootFolder)/wp-content/plugins/fsplugin
  themeFolder: $(rootFolder)/wp-content/themes/fs-theme

steps:
  - checkout: self
    persistCredentials: true

  - task: Bash@3
    displayName: Set PHP version to $(phpVersion)
    inputs:
      targetType: inline
      script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version

  - task: NodeTool@0
    displayName: Set Node version to $(nodeVersion)
    inputs:
      versionSpec: $(nodeVersion)

  - task: Bash@3
    displayName: Install composer packages in plugin
    inputs:
      targetType: inline
      workingDirectory: $(pluginFolder)
      script: composer install --no-interaction --prefer-dist

  - task: Bash@3
    displayName: Install composer packages in theme
    inputs:
      targetType: inline
      workingDirectory: $(themeFolder)
      script: composer install --no-interaction --prefer-dist

  - task: Bash@3
    displayName: Install yarn packages in theme
    inputs:
      targetType: inline
      workingDirectory: $(themeFolder)
      script: yarn install

  - task: Bash@3
    displayName: Build theme assets
    inputs:
      targetType: inline
      workingDirectory: $(themeFolder)
      script: yarn build

  - task: Bash@3
    displayName: Install PHP testing environment
    inputs:
      targetType: inline
      workingDirectory: $(pluginFolder)
      script: |
        # Run MySQL server
        sudo systemctl start mysql.service
        
        # Download empty Wordpress installation and setup testing database
        bash bin/install-wp-tests.sh wp_wp-starter-test root root localhost latest

        # Add permissions to this folder so that tests can create their files
        sudo chmod 777 -R ./tests/tmp

  - task: Bash@3
    displayName: Run plugin PHP tests
    inputs:
      targetType: inline
      workingDirectory: $(pluginFolder)
      script: sudo php ./vendor/bin/phpunit --log-junit test-php-results.xml

  - task: Bash@3
    displayName: Fix file permissions after tests
    inputs:
      targetType: inline
      workingDirectory: $(pluginFolder)
      script: sudo chmod 777 -R ./tests/tmp
    condition: succeededOrFailed() # Run even when tests fail

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testRunner: 'JUnit'
      testResultsFiles: 'test-*.xml'
      searchFolder: $(pluginFolder)
    condition: succeededOrFailed() # Run even when tests fail

  - task: Bash@3
    displayName: Remove dev composer packages in plugin
    inputs:
      targetType: inline
      workingDirectory: $(pluginFolder)
      script: composer update --no-dev --no-interaction --prefer-dist

  - task: Bash@3
    displayName: Removed unused files for artifact build
    inputs:
      targetType: 'inline'
      script: |

        # Clear root files
        rm -rf ./wp-config.php
        rm -rf ./.git
        rm -rf ./.github
        rm -rf ./documentation
        rm -rf ./.gitignore
        rm -rf ./.gitattributes
        rm -rf ./azure-pipelines-build.yml
        rm -rf ./azure-pipelines-qa.yml
        rm -rf ./github-actions-qa.yml
        rm -rf ./*.bat
        rm -rf ./*.sh
        rm -rf ./*.md
        rm -rf ./*.phar
        rm -rf ./*.json

        # Clear theme files
        rm -rf ./wp-content/themes/fs-theme/node_modules
        rm -rf ./wp-content/themes/fs-theme/.scripts
        rm -rf ./wp-content/themes/fs-theme/webpack
        rm -rf ./wp-content/themes/fs-theme/assets/js
        rm -rf ./wp-content/themes/fs-theme/assets/styles
        rm -rf ./wp-content/themes/fs-theme/.babelrc
        rm -rf ./wp-content/themes/fs-theme/.editorconfig
        rm -rf ./wp-content/themes/fs-theme/.eslintignore
        rm -rf ./wp-content/themes/fs-theme/.eslintrc
        rm -rf ./wp-content/themes/fs-theme/README.md
        rm -rf ./wp-content/themes/fs-theme/yarn.lock
        rm -rf ./wp-content/themes/fs-theme/composer.json
        rm -rf ./wp-content/themes/fs-theme/package.json
        rm -rf ./wp-content/themes/fs-theme/composer.lock

        # Clear plugin files
        rm -rf ./wp-content/plugins/fsplugin/tests
        rm -rf ./wp-content/plugins/fsplugin/.phpcs.xml.dist
        rm -rf ./wp-content/plugins/fsplugin/phpunit.xml.dist
        rm -rf ./wp-content/plugins/fsplugin/composer.json
        rm -rf ./wp-content/plugins/fsplugin/composer.lock
        rm -rf ./wp-content/plugins/fsplugin/.editorconfig
        rm -rf ./wp-content/plugins/fsplugin/README.txt
        rm -rf ./wp-content/plugins/fsplugin/TEST-PHP-RESULTS.xml

  - task: ArchiveFiles@2
    displayName: Build artifact
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: 'tar'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz'
      replaceExistingArchive: true
  - task: PublishPipelineArtifact@1
    displayName: Publish artifact
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz'
      artifact: 'fsPortfolio'
      publishLocation: 'pipeline'
